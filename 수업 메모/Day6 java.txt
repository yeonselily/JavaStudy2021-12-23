함수 
특정 기능을 정의한 코드들의 집합 기계와 재료
입력값 매개별수 
출력값 반환값 
처리문으로 이루어져 있음 
처리문에 대한 결과값 return 

메소드 
함수 종류중 클래스 내부에 정의되어 있는 함수를 메소드라 칭한다. 
main메소드




for(int i = 0) 
 

리턴봔환 타입  메소드 이름(소문자 시작, 카멜 표기법)  (매개변수: 변수 선언)  
boolean regStudent(String name딸기, int year){
	,,,,,,,과정 
	return true; 
                        반환 값 (변수 or 상수) 

}

void 공허하다 비어있다 실행만 되고 끝 반환값 없음 

public class MethodEx {

	public static void main(String[] args) {
		

	}

}

AOP -aspect 관점지향언어 


객체지향언어 object-oriented programming, OOP  
클래스, 객체- 세상에 존재하는 모든것 즉 사물 생명등 
프로그래밍 관점에서는 객체들의 관계성을 사용하여 순차적으로 수행되는 프로그램 내에서 객체들 간에 관계(상관관계 레고, 자전거바퀴가 객체, 하나만 고치면 됨, 부품을 간다, 하나하나 조립함) 를 형성하여 프로그램을 동작하게 함. 

객체의 예시 
객체 = 데이터 + 기능
객체 = 컴퓨터  
데이터 = 변수 = 모니터, 본체, 키보드, 마우스, 스피커 등 
기능 = 메소드= 동작, 기능 수행= 화면출력, 프로그램 실행, 입력,소리출력 등 

객체지향 언어특징 
1. 상속
상위클래스의 모든 것을 상속받아 사용하는 것 
부모와 자식 관계 ( 데이터의 관계성) 
2. 캡슐화 - 보호  알약- 정말 중요- 기능별로 숨김 메소드명 보고 정확하게 보고 메소드가 캡슐화 되있는거임   
캠슐처럼 보호함 (데이터의 은닉성) 
private 
데이터와 기능을 외부로부터 접근 차단하고 권한 또는 절차 없이 데이터를 변경 또는 기능 수행할 수 없게 보호함 
3. 추상화 - 중요 
실체가 없는거 뚜렷하지 못한것 
추상적인 요소를 묶어서 분류하는 것 
학생, 선생, 학부모 등 사람이라는 추상적인 요소로 분리 할 수 있음 
데이터의 구조화 
4. 다형성 -추상화, 상속, 다형성 같이감 - 다형성은 객체지향의 꽃- class 제대로 활용  
객체의 기능이 다양한 형태를 가질 수 있음 
상속 깊은 관걔 인터페이스 구현 자전거 바퀴
객체도 상속받은 데이터와 기능을 자식 클래스 재정의 가능 override 

장점 
1. 재사용성: 상속 코드 재사용 높임  
2. 생산성 향상: 클래스 단위의 부품을 조립 
3. 유지보수의 우수성: 구조화 된 소스코드 클래스단위로 소스코드를 관리할 수 있음 
단점 
1. 객체를 세분화하여 설계하여야한다. - 너무 어려움 고무바퀴, 휠, 살, 핀, 너트 조으는 부품   
2. 실행 속도가 절차지향 언어 대비 느리다. 
3. 상속으로 인하여 관계가 많이 형성되면 코딩의 난이도 높아진다.  
 
절차 VS 객체 지향언어 
객체라는 녀석 관계 추가 
절차지향언어에 속한다. 
반대가 아님. 


Class
class, object, instance  
생성자, this, overriding 부모 물려받은 메소드를 새롭게 재정의  

 


